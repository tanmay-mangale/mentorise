<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - Mentorise</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              primary: {
                500: "#3A5BA0",
                600: "#2F3C7E",
              },
            },
          },
        },
      };
    </script>
</head>
<body class="bg-gray-50">
    <!-- Header -->
    <nav class="bg-white shadow-sm border-b sticky top-0 z-10">
        <div class="max-w-4xl mx-auto px-4 py-4 flex items-center justify-between">
            <div class="flex items-center space-x-3">
                <button onclick="goBack()" class="text-gray-600 hover:text-primary-500">
                    <i class="fas fa-arrow-left text-xl"></i>
                </button>
                <div>
                    <h2 class="text-lg font-semibold text-gray-900"><%= otherUserName %></h2>
                    <p class="text-sm text-gray-500">Online</p>
                </div>
            </div>
        </div>
    </nav>

    <!-- Chat Container -->
    <div class="max-w-4xl mx-auto h-[calc(100vh-140px)] flex flex-col">
        <!-- Messages Area -->
        <div id="messages" class="flex-1 overflow-y-auto p-4 space-y-3">
            <!-- Messages will appear here -->
        </div>

        <!-- Input Area -->
        <div class="bg-white border-t p-4">
            <form id="chatForm" class="flex gap-2">
                <input 
                    type="text" 
                    id="messageInput" 
                    placeholder="Type a message..." 
                    class="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                    required
                    autocomplete="off"
                />
                <button 
                    type="submit" 
                    class="bg-primary-500 text-white px-6 py-3 rounded-lg hover:bg-primary-600 transition-colors">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>
        </div>
    </div>

    <script>
        const socket = io();
        
        const currentUserId = '<%= currentUserId %>';
        const currentUserName = '<%= currentUserName %>';
        const otherUserId = '<%= otherUserId %>';
        const otherUserName = '<%= otherUserName %>';
        
        // Create room ID (alphabetically sorted to ensure same room for both users)
        const roomId = [currentUserId, otherUserId].sort().join('_');

        // Join the chat room
        socket.emit('join-chat', { roomId, userName: currentUserName });

        // Send message
        document.getElementById('chatForm').addEventListener('submit', (e) => {
            e.preventDefault();
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (message) {
                socket.emit('send-message', {
                    roomId,
                    message,
                    sender: currentUserId,
                    senderName: currentUserName
                });
                messageInput.value = '';
            }
        });

        // Receive message
        socket.on('receive-message', (data) => {
            displayMessage(data);
        });

        function displayMessage(data) {
            const messagesDiv = document.getElementById('messages');
            const isMyMessage = data.sender === currentUserId;
            
            const messageDiv = document.createElement('div');
            messageDiv.className = `flex ${isMyMessage ? 'justify-end' : 'justify-start'}`;
            
            messageDiv.innerHTML = `
                <div class="max-w-xs lg:max-w-md">
                    ${!isMyMessage ? `<p class="text-xs text-gray-500 mb-1">${data.senderName}</p>` : ''}
                    <div class="${isMyMessage ? 'bg-primary-500 text-white' : 'bg-white'} px-4 py-2 rounded-lg shadow">
                        <p>${data.message}</p>
                    </div>
                    <p class="text-xs text-gray-400 mt-1">${formatTime(data.timestamp)}</p>
                </div>
            `;
            
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function formatTime(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
        }

        function goBack() {
            window.history.back();
        }
    </script>
</body>
</html>